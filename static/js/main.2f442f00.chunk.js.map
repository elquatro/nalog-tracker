{"version":3,"sources":["App.tsx","index.tsx"],"names":["toTime","seconds","date","Date","setSeconds","toISOString","substr","DEFAULT_TASKS","App","useLocalStorage","map","title","tasks","setTasks","useState","newTitle","setNewTitle","activeTask","setActiveTask","totalSeconds","reduce","acc","cur","useEffect","document","updateTask","useCallback","t","past","getTime","interval","setInterval","now","Math","round","clearInterval","addTask","trim","some","style","padding","width","span","direction","size","cancelText","okText","onConfirm","event","stopPropagation","icon","ClearOutlined","display","sort","a","b","task","isActive","cursor","onClick","headStyle","backgroundColor","bodyStyle","extra","filter","onCancel","shape","DeleteOutlined","marginTop","maxLength","value","onChange","target","placeholder","onPressEnter","type","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.2f442f00.chunk.js","sourcesContent":["import \"antd/dist/antd.css\";\n\nimport {\n  Card,\n  Input,\n  Button,\n  Space,\n  Row,\n  Col,\n  Popconfirm,\n  Tooltip,\n} from \"antd\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport useLocalStorage from \"use-local-storage\";\nimport { ClearOutlined, DeleteOutlined } from \"@ant-design/icons\";\n\ntype Task = {\n  title: string;\n  seconds: number;\n};\n\nfunction toTime(seconds: number) {\n  const date = new Date(0);\n  date.setSeconds(seconds);\n  return date.toISOString().substr(11, 8);\n}\n\nconst DEFAULT_TASKS = [\n  \"Планирование\",\n  \"Разработка\",\n  \"ИФТ+ПСИ\",\n  \"Внедрение\",\n  \"DevOps\",\n  \"Коммуникация\",\n  \"Работа на метрики\",\n  \"Поддержка (ТП)\",\n];\n\nexport default function App() {\n  const [tasks, setTasks] = useLocalStorage<Task[]>(\n    \"tasks\",\n    DEFAULT_TASKS.map((title) => ({ title, seconds: 0 }))\n  );\n\n  const [newTitle, setNewTitle] = useState(\"\");\n\n  const [activeTask, setActiveTask] = useLocalStorage<string>(\n    \"active-task\",\n    \"\"\n  );\n\n  const totalSeconds = tasks.reduce((acc, cur) => (acc += cur.seconds), 0);\n\n  useEffect(() => {\n    document.title = `Налог-трекер: ${toTime(totalSeconds)}`;\n  }, [totalSeconds]);\n\n  const updateTask = useCallback(\n    (title: string, seconds: number) => {\n      setTasks((tasks = []) => [\n        ...tasks.map((t) =>\n          t.title !== title ? { ...t } : { ...t, seconds: t.seconds + seconds }\n        ),\n      ]);\n    },\n    [setTasks]\n  );\n\n  useEffect(() => {\n    let past = new Date().getTime();\n\n    const interval = setInterval(() => {\n      const now = new Date().getTime();\n\n      const seconds = Math.round((now - past) / 1000);\n\n      updateTask(activeTask, seconds);\n\n      past = now;\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [activeTask, updateTask]);\n\n  const addTask = () => {\n    if (newTitle.trim() === \"\") {\n      return;\n    }\n\n    if (tasks.some((t) => t.title === newTitle)) {\n      return;\n    }\n\n    setTasks((tasks = []) => [...tasks, { title: newTitle, seconds: 0 }]);\n    setNewTitle(\"\");\n  };\n\n  const deleteTask = (title: string) => {\n    setTasks((tasks = []) => [...tasks.filter((t) => t.title !== title)]);\n  };\n\n  const clearSeconds = () => {\n    setTasks((tasks = []) => [...tasks.map((t) => ({ ...t, seconds: 0 }))]);\n  };\n\n  return (\n    <Row style={{ padding: \"2rem\", width: \"600px\" }}>\n      <Col span={2}>\n        <Space direction=\"vertical\" size=\"middle\">\n          <Row>\n            <Col>\n              <Tooltip title=\"Сбросить время\">\n                <Popconfirm\n                  title=\"Точно?\"\n                  cancelText=\"Нет\"\n                  okText=\"Да\"\n                  onConfirm={(event) => {\n                    clearSeconds();\n                    setActiveTask(\"\");\n                    event?.stopPropagation();\n                  }}\n                >\n                  <Button icon={<ClearOutlined />} />\n                </Popconfirm>\n              </Tooltip>\n            </Col>\n          </Row>\n        </Space>\n      </Col>\n\n      <Col span={22}>\n        <Space direction=\"vertical\" size=\"middle\" style={{ display: \"flex\" }}>\n          {tasks\n            .sort((a, b) => b.seconds - a.seconds)\n            .map((task) => {\n              const isActive = task.title === activeTask;\n\n              const onClick = () => {\n                if (isActive) {\n                  setActiveTask(\"\");\n                } else {\n                  setActiveTask(task.title);\n                }\n              };\n\n              return (\n                <Card\n                  size=\"small\"\n                  style={{ cursor: \"pointer\" }}\n                  key={task.title}\n                  title={task.title}\n                  onClick={onClick}\n                  headStyle={{\n                    backgroundColor: isActive ? \"#e5ffa3\" : \"initial\",\n                  }}\n                  bodyStyle={{\n                    backgroundColor: isActive ? \"#f7ffe4\" : \"initial\",\n                  }}\n                  extra={\n                    <span onClick={(event) => event.stopPropagation()}>\n                      <Popconfirm\n                        title=\"Точно?\"\n                        onConfirm={(event) => {\n                          deleteTask(task.title);\n                          event?.stopPropagation();\n                        }}\n                        onCancel={(event) => event?.stopPropagation()}\n                        okText=\"Да\"\n                        cancelText=\"Нет\"\n                      >\n                        <Button shape=\"circle\" icon={<DeleteOutlined />} />\n                      </Popconfirm>\n                    </span>\n                  }\n                >\n                  {toTime(task.seconds)}\n                </Card>\n              );\n            })}\n        </Space>\n        <Row style={{ marginTop: \"1rem\" }}>\n          <Col span={18}>\n            <Input\n              maxLength={256}\n              size=\"large\"\n              value={newTitle}\n              onChange={(event) => setNewTitle(event.target.value)}\n              placeholder=\"Новая активность\"\n              onPressEnter={addTask}\n            />\n          </Col>\n          <Col span={6}>\n            <Button\n              size=\"large\"\n              type=\"primary\"\n              onClick={addTask}\n              style={{ width: \"100%\" }}\n            >\n              Добавить\n            </Button>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  );\n}\n","import { StrictMode } from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}